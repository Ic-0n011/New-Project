бесполезный файл для передачи данных
test
009182

with open("hi.txt", "r", encoding="utf-8") as file:
    for line in file:
        print(line, end="")



class Record:
    def __init__(self, name, number):
        self.name = name
        self.number = number

    def write(self, file_name):
        with open(file_name, 'w') as file:
            file.write(f"{self.name} {self.number}\n")

    @staticmethod
    def read(file_name):
        if not os.path.exists(file_name):
            return None

        with open(file_name) as file:
            lines = file.readlines()

        try:
            name = lines[0].split()[0]
            number = int(lines[0].split()[1])

            return Record(name, number)
        except (IndexError, ValueError):
            return None

    def update(self, new_name, new_number):
        new_record = Record(new_name, new_number)

        self.write(file_name=file_name)

def main():
    file_name = 'records.txt'



    if os.path.exists(file_name):
        records = Record.read(file_name)
    else:
        records = None

    records = Record('John', 10)
    records.write(file_name)

    updated_records = records.update('Jane', 20)

if __name__ == '__main__':
    main()
В этом примере мы создали класс Record, который содержит имя и число. Этот класс имеет методы write, read и update для записи, чтения и обновления записей в текстовом файле. Мы также создали функцию main(), которая использует этот класс для записи, обновления и чтения записей из файла records.txt.

            if sorted_records[0].number < record.number:  # Проверяем, является ли новая запись лучше самой плохой
                del sorted_records[sorted_records.index(sorted_records[0])]  # Удаляем самую плохую запись
            else:
                raise ValueError("Файл заполнен, нельзя добавить новую запись")  # Если новая запись хуже самой плохой, то выдаем ошибку
        file.write(f"{record.name} {record.number}\n")  # Записываем новую запись в файл
```
Обратите внимание, что здесь используется функция `sorted_records.sort()`, которая сортирует список записей в обратном порядке (от большего числа к меньшему). Если вы хотите сортировать в обычном порядке (от меньшего числа к большему), то используйте `sorted_records.sort(reverse=True)`.